import{_ as n,d as s}from"./app.5f1a8df7.js";const a={},e=s(`<h1 id="bsb-config" tabindex="-1"><a class="header-anchor" href="#bsb-config" aria-hidden="true">#</a> BSB Config</h1><h2 id="the-sec-config-json-file" tabindex="-1"><a class="header-anchor" href="#the-sec-config-json-file" aria-hidden="true">#</a> The <code>sec.config.json</code> file</h2><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;identity&quot;</span><span class="token operator">:</span> <span class="token string">&quot;development&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;debug&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token property">&quot;deploymentProfiles&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;default&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;events-rabbitmq&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;mappedName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;rabbitmq&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;enabled&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;plugins&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;rabbitmq&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;prefetch&quot;</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
      <span class="token property">&quot;endpoint&quot;</span><span class="token operator">:</span> <span class="token string">&quot;amqp://localhost&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;credentials&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;username&quot;</span><span class="token operator">:</span> <span class="token string">&quot;guest&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;password&quot;</span><span class="token operator">:</span> <span class="token string">&quot;guest&quot;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token property">&quot;uniqueId&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>Plugins that contain an events definition and enabled in the deployment profile will be activated automatically.</p><h2 id="events-methods" tabindex="-1"><a class="header-anchor" href="#events-methods" aria-hidden="true">#</a> Events/methods</h2><p>When <code>pluginName</code> is set to null, the current plugin name is used.</p><h3 id="fire-and-forget" tabindex="-1"><a class="header-anchor" href="#fire-and-forget" aria-hidden="true">#</a> Fire and forget</h3><p>Listen to events:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// this.onEvent&lt;ArgsDataType = any&gt;(pluginName: string, event: string, listener: { (data: ArgsDataType): Promise&lt;void&gt;; });</span>
<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token generic-function"><span class="token function">onEvent</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;on-event&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// this event runs when emitEvent is called with the same plugin name and event</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// output: &quot;THIS IS A TEST&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Trigger the events:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">//emitEvent&lt;ArgsDataType = any&gt;(pluginName: string, event: string, data?: ArgsDataType);</span>
<span class="token generic-function"><span class="token function">emitEvent</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;on-event&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;THIS IS A TEST&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="get-reply" tabindex="-1"><a class="header-anchor" href="#get-reply" aria-hidden="true">#</a> Get reply</h3><p>Listen to returnable events:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// this.onEvent&lt;ArgsDataType = any&gt;(pluginName: string, event: string, listener: { (data: ArgsDataType): Promise&lt;void&gt;; });</span>
<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token generic-function"><span class="token function">onReturnableEvent</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">boolean</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;on-returnable-event&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>data<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// this is an async/promise  </span>
  <span class="token comment">// this event runs when emitEvent is called with the same plugin name and event</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// output: &quot;THIS IS A TEST&quot;</span>
  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Trigger the events:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">//emitEvent&lt;ArgsDataType = any&gt;(pluginName: string, event: string, data?: ArgsDataType);</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token generic-function"><span class="token function">emitReturnableEvent</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;on-returnable-event&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;THIS IS A TEST&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// output: true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="send-receive-a-stream" tabindex="-1"><a class="header-anchor" href="#send-receive-a-stream" aria-hidden="true">#</a> Send/Receive a stream</h3><p>Ready the events plugin to do a stream transfer:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// this.receiveStream(callerPluginName: string, listener: { (error: Error | null, stream: Readable): Promise&lt;void&gt;; }, timeoutSeconds: number = 60): Promise&lt;string&gt;</span>
<span class="token keyword">let</span> streamId <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">receiveStream</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;on-event&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>error<span class="token operator">:</span> Error <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span> stream<span class="token operator">:</span> Readable<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// this is an async/promise  </span>
  <span class="token comment">// do stuff with the stream</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// emit the stream ID to to origin service to start the stream</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Send the stream to the receiver:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">//sendStream(callerPluginName: string, streamId: string, stream: Readable): Promise&lt;void&gt;</span>
<span class="token keyword">await</span> <span class="token function">sendStream</span><span class="token punctuation">(</span>streamId<span class="token punctuation">,</span> stream<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token comment">// stream ID from the receiveStream and stream from the item you want to stream  </span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="bsb-config-plugins" tabindex="-1"><a class="header-anchor" href="#bsb-config-plugins" aria-hidden="true">#</a> BSB Config Plugins</h2><h3 id="rabbitmq" tabindex="-1"><a class="header-anchor" href="#rabbitmq" aria-hidden="true">#</a> <a href="/Events/RabbitMQ">RabbitMQ</a></h3>`,23);function t(p,o){return e}var l=n(a,[["render",t],["__file","index.html.vue"]]);export{l as default};
